add_history.m: function [subj] = add_history(subj,objtype,objname,hist_str,displayme)
add_results_history.m: function [results] = add_results_history(results,hist_str,disphead)
add_subj_history.m: function [subj] = add_subj_history(subj,hist_str)
anovaVox.m: error('Renamed to statmap_anova');
average_data.m: function [subj] = average_data(subj,patname,regsname,selname,maskname)
call_classifier.m: function [out,scratchpad,header] = call_classifier(classifier,class_args,trainpats,traintargs,testpats,testtargs,header);
change_groupname.m: function [subj] = change_groupname(subj,objtype,old_groupname,new_groupname)
check_masks.m: function [] = check_masks(subj,parent_patname,maskname,child_patname,voxno);
check_restTRs.m: function [bool idx] = check_restTRs(subj,patname,regsname,selname,maskname)
class_bp.m: function [out,bp] = class_bp(class_args,trainpats,traintargs,testpats,testtargs)
compare_size.m: function [issame] = compare_size(m1,m2)
create_args_list.m: function [all_lines] = create_args_list(varargin)
create_pattern_from_mask.m: function [subj] = create_pattern_from_mask(subj,old_patname,maskname,new_patname)
create_runminusone_indices.m: function [subj] = create_runminusone_indices(subj,runs_selname,actives_selname,new_selstem)
create_thresh_mask.m: function [subj] = create_thresh_mask(subj,patname,new_maskname,thresh,varargin)
cross_validation.m: function [subj results] = cross_validation(subj,class_args,patname,regsname,selgroup,maskgroup)
datetime.m: function [dt] = datetime(seconds)
delete_restTRs.m: function [subj] = delete_restTRs(subj,patname,regsname,selname,maskname)
display_history.m: function [] = display_object_history(subj,objtype,obj_name)
display_subj_history.m: function [] = display_subj_history(subj)
doBenchSubj.m: error('Renamed doBenchSubj.m to tutorial_haxby.m');
duplicate_object.m: function [subj mat] = duplicate_object(subj,objtype,oldobjname,newobjname,group_name)
exist_field.m: function [isthere] = exist_field(subj,objtype,objname,fieldname)
export_to_afni.m: function [] = export_to_afni(single_vol,sample_brik_name,new_brik_name,opt)
find_group.m: function [matches] = find_group(subj,objtype,groupname)
find_obj.m: function [type_matches_str type_matches_vec] = find_obj(subj,objname)
get_objfield.m: function [val] = get_objfield(subj,objtype,objname,fieldname)
get_mask_parentvol.m: function [vol] = get_mask_parentvol(subj,patname)
get_masked_pattern.m: function [masked_pats] = get_masked_pattern(subj,patname,maskname)
get_mat.m: function [mat] = get_mat(subj,objtype,objname)
get_name.m: function [name obj] = get_name(subj,objtype,objno)
get_number.m: function [objno] = get_number(subj,objtype,objname,ignore_absence)
get_object.m: function [obj] = get_object(subj,objtype,objname)
get_subfield.m: function [val] = get_subfield(subj,objtype,objname,fieldname,subfieldname)
get_type.m: function [objcell] = get_type(subj,objtype)
init_object.m: function [subj nbr_xxx] = init_object(subj,objtype,newobjname);
init_subj.m: function [subj] = init_subj(exp_name,id,varargin)
load_AFNI_mask.m: function [subj] = load_AFNI_mask(subj,new_maskname,filename)
load_AFNI_pattern.m: function [subj] = load_AFNI_pattern(subj,new_patname,filenames,maskname)
load_pattern_from_hd.m: function [subj] = load_pattern_from_hd(subj,patname)
move_pattern_to_hd.m: function [subj pathfilename] = move_pattern_to_hd(subj,patname,subdir)
paint_mask.m: function [paintvol] = paint_mask(vol,sample_brik_name,new_brik_name,vals,opt)
peek_anova.m: function [subj] = peek_anova(subj,old_patname,regsname,selname,new_patname,new_maskname,thresh)
pminusone_anova.m: function [subj] = pminusone_anova(subj,old_patname,regsname,selsgroup,new_patstem,new_maskstem,thresh)
print_matsize.m: function [strsize] = print_matsize(numsize)
propval.m: function [combined_struct user_struct undefaulted_struct] = propval(user_propvals,defaults_struct)
remove_field.m: function [subj] = remove_field(subj,objtype,objname,fieldname)
remove_group.m: function [subj] = remove_group(subj,objtype,groupname)
remove_mat.m: function [subj] = remove_mat(subj,objtype,objname)
remove_object.m: function [subj] = remove_object(subj,objtype,objname)
save_subj.m: function [subj filename] = save_subj(subj,varargin)
set_field.m: function [subj] = set_field(subj,objtype,objname,fieldname,newval,ignore_absence)
set_mat.m: function [subj] = set_mat(subj,objtype,objname,newmat,ignore_empty)
set_object.m: function [subj] = set_object(subj,objtype,objname,obj)
set_subfield.m: function [subj] = set_subfield(subj,objtype,objname,fieldname,subfieldname,newval,ignore_absence)
set_type.m: function [subj] = set_type(subj,objtype,objcell)
statmap_anova.m: function [subj p] = statmap_anova(subj,patname,regsname,selname,new_patname)
summarize.m: function [] = summarize(subj,varargin)
test_mem.m: function [] = test_mem()
test_mem2.m: function [] = test_mem2()
test_mem3.m: function [] = test_mem3()
test_propval.m: function [combined_struct user_struct undefaulted_struct] = test_propval(varargin)
tutorial_easy.m: function [subj results] = tutorial_easy()
zscore_runs.m: function [subj new_patname] = zscore_runs(subj,patname,selname)
